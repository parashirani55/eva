from vocode.streaming.agent.base_agent import BaseAgent
from vocode.streaming.models.agent import AgentConfig
from vocode.streaming.models.transcript import Transcript
from vocode.streaming.models.message import BaseMessage
import asyncio
import time
import logging
import os
import openai

class EVAAgentConfig(AgentConfig):
    type: str = "custom_eva"

class EVAAgent(BaseAgent):
    def __init__(self, agent_config: EVAAgentConfig):
        super().__init__(agent_config)
        self.agent_config = agent_config
        self.transcript = []
        self.state = "GREETING"
        self.done = False
        self.last_response_time = time.time()
        self.openai_client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

    async def respond(self, message: BaseMessage) -> BaseMessage:
        user_input = message.text.strip()
        self.transcript.append(f"Caller: {user_input}")
        self.last_response_time = time.time()

        if self.state == "GREETING":
            self.state = "RING"
            return BaseMessage(text="Hi, this is EVA. Are you ready to test your incoming call skills?")

        elif self.state == "RING":
            self.state = "SCENARIO"
            return BaseMessage(text="Ring ring.")

        elif self.state == "SCENARIO":
            self.state = "ROLEPLAY"
            return BaseMessage(text="Hi, Iâ€™ve never been there before. My check engine light just came on. What do I need to do?")

        elif self.state == "ROLEPLAY":
            if "appointment" in user_input.lower():
                self.state = "THANK_YOU"
                return BaseMessage(text="Thank you, goodbye.")
            else:
                return BaseMessage(text="Can you help me understand what I need to do next?")

        elif self.state == "THANK_YOU":
            self.state = "WAITING"
            self.done = True
            return BaseMessage(text="...")  # Silent pause before grading

        elif self.state == "WAITING":
            await asyncio.sleep(10)
            return await self.grade_transcript()

        return BaseMessage(text="...")

    async def grade_transcript(self) -> BaseMessage:
        prompt = (
            "You are a training coach for automotive service advisors. The following is a transcript of a simulated call."
            " Please grade the advisor on their tone, professionalism, and ability to set an appointment."
            " Provide short verbal feedback.\n\nTranscript:\n" + "\n".join(self.transcript)
        )

        response = self.openai_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
        )

        feedback = response.choices[0].message.content.strip()
        return BaseMessage(text=feedback)

    def should_continue(self):
        return not self.done

    def receive_handoff(self, transcript: Transcript):
        pass
